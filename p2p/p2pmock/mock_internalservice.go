// Code generated by MockGen. DO NOT EDIT.
// Source: internalservice.go

// Package p2pmock is a generated GoMock package.
package p2pmock

import (
	p2pcommon "github.com/Cofresi/aergo/p2p/p2pcommon"
	types "github.com/Cofresi/aergo/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInternalService is a mock of InternalService interface
type MockInternalService struct {
	ctrl     *gomock.Controller
	recorder *MockInternalServiceMockRecorder
}

// MockInternalServiceMockRecorder is the mock recorder for MockInternalService
type MockInternalServiceMockRecorder struct {
	mock *MockInternalService
}

// NewMockInternalService creates a new mock instance
func NewMockInternalService(ctrl *gomock.Controller) *MockInternalService {
	mock := &MockInternalService{ctrl: ctrl}
	mock.recorder = &MockInternalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInternalService) EXPECT() *MockInternalServiceMockRecorder {
	return m.recorder
}

// SelfMeta mocks base method
func (m *MockInternalService) SelfMeta() p2pcommon.PeerMeta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfMeta")
	ret0, _ := ret[0].(p2pcommon.PeerMeta)
	return ret0
}

// SelfMeta indicates an expected call of SelfMeta
func (mr *MockInternalServiceMockRecorder) SelfMeta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfMeta", reflect.TypeOf((*MockInternalService)(nil).SelfMeta))
}

// SelfNodeID mocks base method
func (m *MockInternalService) SelfNodeID() types.PeerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfNodeID")
	ret0, _ := ret[0].(types.PeerID)
	return ret0
}

// SelfNodeID indicates an expected call of SelfNodeID
func (mr *MockInternalServiceMockRecorder) SelfNodeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfNodeID", reflect.TypeOf((*MockInternalService)(nil).SelfNodeID))
}

// SelfRole mocks base method
func (m *MockInternalService) SelfRole() p2pcommon.PeerRole {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfRole")
	ret0, _ := ret[0].(p2pcommon.PeerRole)
	return ret0
}

// SelfRole indicates an expected call of SelfRole
func (mr *MockInternalServiceMockRecorder) SelfRole() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfRole", reflect.TypeOf((*MockInternalService)(nil).SelfRole))
}

// GetChainAccessor mocks base method
func (m *MockInternalService) GetChainAccessor() types.ChainAccessor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainAccessor")
	ret0, _ := ret[0].(types.ChainAccessor)
	return ret0
}

// GetChainAccessor indicates an expected call of GetChainAccessor
func (mr *MockInternalServiceMockRecorder) GetChainAccessor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainAccessor", reflect.TypeOf((*MockInternalService)(nil).GetChainAccessor))
}
